rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
service firebase.storage {
  match /b/{bucket}/o {
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'mhabz1129@gmail.com';
    }

    // Allow access to user photos with proper validation
    match /user-photos/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null 
                   && request.auth.uid == userId;
    }

    // Allow access to profile pictures
    match /profilePictures/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        userId == request.auth.uid || isAdmin()
      );
    }

    // Allow public access to generated videos
    match /videos/{videoId} {
      allow read: if true;  // Anyone can view the videos
      allow write: if request.auth != null;  // Only authenticated users can create videos
    }

    // Allow authenticated users to access their own files
    match /users/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        userId == request.auth.uid || isAdmin()
      );
    }

    // Add specific rules for locations photos
    match /locations/{locationId}/{allPaths=**} {
      allow read: if true;  // Anyone can view location photos
      allow write: if request.auth != null && request.auth.token.email == 'mhabz1129@gmail.com';
    }

    // General access rule for other paths
    match /{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.email == 'mhabz1129@gmail.com';
    }
  }
}
